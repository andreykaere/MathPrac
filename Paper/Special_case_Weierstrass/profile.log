FUNCTION  3()
    Defined: ~/.vim/bundle/vim-matchup/autoload/matchup/matchparen.vim:303
Called 27 times
Total time:   0.003864
 Self time:   0.001116

count  total (s)   self (s)
   27              0.000563   if !get(b:, 'matchup_matchparen_deferred', g:matchup_matchparen_deferred)
   27   0.003208   0.000460     return s:matchparen.highlight()
                              endif
                            
                              if !exists('w:matchup_timer')
                                let s:show_delay = g:matchup_matchparen_deferred_show_delay
                                let s:hide_delay = g:matchup_matchparen_deferred_hide_delay
                                let w:matchup_timer = timer_start(s:show_delay, function('s:timer_callback', [ win_getid() ]), {'repeat': -1})
                                if !exists('w:matchup_need_clear')
                                  let w:matchup_need_clear = 0
                                endif
                                let s:fade_time = g:matchup_matchparen_deferred_fade_time
                                if s:fade_time > 0
                                  let w:matchup_fade_timer = timer_start(s:fade_time, function('s:fade_timer_callback', [ win_getid() ]), {'repeat': -1})
                                  call timer_pause(w:matchup_fade_timer, 1)
                                endif
                              endif
                            
                              " keep the timer alive with a heartbeat
                              let w:matchup_pulse_time = reltime()
                            
                              " if the timer is paused, some time has passed
                              if timer_info(w:matchup_timer)[0].paused
                                " unpause the timer
                                call timer_pause(w:matchup_timer, 0)
                            
                                " set the hi time to the pulse time
                                let w:matchup_hi_time = w:matchup_pulse_time
                              endif

FUNCTION  4()
    Defined: ~/.vim/bundle/vim-matchup/autoload/matchup/matchparen.vim:342
Called 31 times
Total time:   0.003591
 Self time:   0.003591

count  total (s)   self (s)
   31              0.000431   if !g:matchup_matchparen_enabled | return | endif
                            
   31              0.000698   if has('vim_starting') | return | endif
                            
   31              0.000363   if !g:matchup_matchparen_pumvisible && pumvisible() | return | endif
                            
                              " try to avoid interfering with some auto-complete plugins
   31              0.000596   if has('*state') && state('a') !=# '' | return | endif
                            
   31              0.000610   if !get(b:, 'matchup_matchparen_enabled', 1) && get(b:, 'matchup_matchparen_fallback', 1) && s:pi_paren_sid()
                                return call(s:pi_paren_fcn, [])
   31              0.000056   endif
                            
   31              0.000304   if !get(b:, 'matchup_matchparen_enabled', 1) | return | endif
                            
                              let l:force_update    = a:0 >= 1 ? a:1 : 0
                              let l:changing_insert = a:0 >= 2 ? a:2 : 0
                              let l:real_mode = l:changing_insert ? v:insertmode : mode()
                            
                              if !l:force_update && exists('w:last_changedtick') && exists('w:last_cursor') && matchup#pos#equal(w:last_cursor, matchup#pos#get_cursor()) && w:last_changedtick == b:changedtick
                                return
                              endif
                              let w:last_changedtick = b:changedtick
                              let w:last_cursor = matchup#pos#get_cursor()
                            
                              call matchup#perf#tic('matchparen.highlight')
                            
                              " request eventual clearing of stale matches
                              let l:token = {}
                              call self.fade(0, [], l:token)
                            
                              let l:modes = g:matchup_matchparen_nomode
                              if get(g:, 'matchup_matchparen_novisual', 0)  " deprecated option name
                                let l:modes .= "vV\<c-v>"
                              endif
                              if stridx(l:modes, l:real_mode) >= 0
                                return
                              endif
                            
                              " prevent problems in visual block mode at the end of a line
                              if get(matchup#pos#get_cursor(), 4, 0) == 2147483647 && "v\<c-v>" =~? mode()
                                return
                              endif
                            
                              " don't get matches when inside a closed fold
                              if foldclosed(line('.')) > -1
                                return
                              endif
                            
                              " give up when cursor is far into a very long line
                              if &synmaxcol && col('.') > &synmaxcol
                                return
                              endif
                            
                              " in insert mode, cursor is treated as being one behind
                              let l:insertmode = l:real_mode ==# 'i'
                            
                              " start the timeout period
                              let l:timeout = l:insertmode ? get(b:, 'matchup_matchparen_insert_timeout',           g:matchup_matchparen_insert_timeout) : get(b:, 'matchup_matchparen_timeout',           g:matchup_matchparen_timeout)
                              call matchup#perf#timeout_start(l:timeout)
                            
                              let l:current = matchup#delim#get_current('all', 'both_all', { 'insertmode': l:insertmode,   'stopline': g:matchup_matchparen_stopline,   'highlighting': 1, })
                              call matchup#perf#toc('matchparen.highlight', 'get_current')
                            
                              if get(b:, 'matchup_matchparen_deferred', g:matchup_matchparen_deferred)
                                let l:hsa = get(b:, 'matchup_matchparen_hi_surround_always', g:matchup_matchparen_hi_surround_always)
                                if l:hsa > 0 && empty(l:current) || l:hsa > 1
                                  call s:highlight_surrounding(l:insertmode, !empty(l:current))
                                endif
                              endif
                            
                              if empty(l:current)
                                return
                              endif
                            
                              let l:corrlist = matchup#delim#get_matching(l:current, { 'stopline': g:matchup_matchparen_stopline,   'highlighting': 1, })
                              call matchup#perf#toc('matchparen.highlight', 'get_matching')
                              if empty(l:corrlist) | return | endif
                            
                              if g:matchup_transmute_enabled
                                if !exists('w:matchup_matchparen_context')
                                  let w:matchup_matchparen_context = { 'normal': {   'current':   {},   'corrlist':  [],  }, 'prior': {}, 'counter': 0,}
                                endif
                            
                                let w:matchup_matchparen_context.counter += 1
                            
                                if !l:insertmode
                                  let w:matchup_matchparen_context.prior = copy(w:matchup_matchparen_context.normal)
                            
                                  let w:matchup_matchparen_context.normal.current = l:current
                                  let w:matchup_matchparen_context.normal.corrlist = l:corrlist
                                endif
                            
                                " if transmuted, highlight again (will reset timeout)
                                if matchup#transmute#tick(l:insertmode)
                                  " no force_update here because it would screw up prior
                                  return s:matchparen.highlight(0, l:changing_insert)
                                endif
                              endif
                            
                              if !has_key(l:current, 'match_index') || len(l:corrlist) <= (l:current.side ==# 'mid' ? 2 : 1) && !g:matchup_matchparen_singleton
                                " TODO this doesn't catch every case, needs refactor
                                " TODO singleton doesn't work right for mids
                                return
                              endif
                            
                              " prepare for (possibly) new highlights
                              let l:pos = [l:current.lnum, l:current.cnum]
                              if self.fade(1, l:pos, l:token)
                                return
                              endif
                            
                              " store flag meaning highlighting is active
                              let w:matchup_need_clear = 1
                            
                              " disable off-screen when scrolling with j/k
                              let l:scrolling = get(g:matchup_matchparen_offscreen, 'scrolloff', 0) && winheight(0) > 2*&scrolloff && (line('.') == line('w$')-&scrolloff     && line('$') != line('w$')     || line('.') == line('w0')+&scrolloff)
                            
                              " show off-screen matches
                              let l:method = get(g:matchup_matchparen_offscreen, 'method', '')
                              if !empty(l:method) && l:method !=# 'none' && !l:current.skip && !l:scrolling && winheight(0) > 0
                                call s:do_offscreen(l:current, l:method)
                              endif
                            
                              " add highlighting matches
                              call s:add_matches(l:corrlist, l:current)
                            
                              " highlight the background between parentheses
                              if g:matchup_matchparen_hi_background >= 1
                                call s:highlight_background(l:corrlist)
                              endif
                            
                              " new highlights done, request fade away
                              call self.fade(2, l:pos, l:token)
                            
                              call matchup#perf#toc('matchparen.highlight', 'end')

FUNCTION  <SNR>89_parser_delim()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:663
Called 12 times
Total time:   0.015051
 Self time:   0.006558

count  total (s)   self (s)
   12              0.000087   let result = {}
   12              0.000081   let result.type = 'delim'
   12              0.002077   let result.side = a:match =~# g:vimtex#delim#re.delim_all.open ? 'open' : 'close'
   12              0.000115   let result.is_open = result.side ==# 'open'
   12              0.000214   let result.get_matching = function('s:get_matching_delim')
   12              0.000081   let result.gms_flags = result.is_open ? 'nW' : 'bnW'
   12              0.000247   let result.gms_stopline = result.is_open ? line('.') + g:vimtex_delim_stopline : max([1, line('.') - g:vimtex_delim_stopline])
                            
                              "
                              " Find corresponding delimiter and the regexps
                              "
   12              0.000809   if a:match =~# '^' . g:vimtex#delim#re.mods.both
                                let m1 = matchstr(a:match, '^' . g:vimtex#delim#re.mods.both)
                                let d1 = substitute(strpart(a:match, len(m1)), '^\s*', '', '')
                                let s1 = !result.is_open
                                let re1 = s:parser_delim_get_regexp(m1, s1, 'mods')  . '\s*' . s:parser_delim_get_regexp(d1, s1, 'delim_math')
                            
                                let m2 = s:parser_delim_get_corr(m1, 'mods')
                                let d2 = s:parser_delim_get_corr(d1, 'delim_math')
                                let s2 = result.is_open
                                let re2 = s:parser_delim_get_regexp(m2, s2, 'mods') . '\s*' . (m1 =~# '\\\%(left\|right\)'   ? '\%(' . s:parser_delim_get_regexp(d2, s2, 'delim_math') . '\|\.\)'   : s:parser_delim_get_regexp(d2, s2, 'delim_math'))
   12              0.000034   else
   12              0.000066     let d1 = a:match
   12              0.000042     let m1 = ''
   12   0.002991   0.000361     let re1 = s:parser_delim_get_regexp(a:match, !result.is_open)
                            
   12   0.003993   0.000290     let d2 = s:parser_delim_get_corr(a:match)
   12              0.000046     let m2 = ''
   12   0.002431   0.000271     let re2 = s:parser_delim_get_regexp(d2, result.is_open)
   12              0.000023   endif
                            
   12              0.000070   let result.delim = d1
   12              0.000050   let result.mod = m1
   12              0.000077   let result.corr = m2 . d2
   12              0.000058   let result.corr_delim = d2
   12              0.000055   let result.corr_mod = m2
   12              0.000246   let result.re = { 'this'  : re1, 'corr'  : re2, 'open'  : result.is_open ? re1 : re2, 'close' : result.is_open ? re2 : re1,}
                            
   12              0.000045   return result

FUNCTION  vimtex#syntax#in_mathzone()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/syntax.vim:62
Called 1 time
Total time:   0.001383
 Self time:   0.000024

count  total (s)   self (s)
    1   0.001381   0.000022   return call('vimtex#syntax#in', ['texMathZone'] + a:000)

FUNCTION  vimtex#syntax#in_comment()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/syntax.vim:57
Called 16 times
Total time:   0.044613
 Self time:   0.000448

count  total (s)   self (s)
   16   0.044597   0.000432   return call('vimtex#syntax#in', ['texComment'] + a:000)

FUNCTION  <SNR>101_parse_args()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/pos.vim:67
Called 40 times
Total time:   0.003117
 Self time:   0.003117

count  total (s)   self (s)
                              "
                              " The arguments should be in one of the following forms (when unpacked):
                              "
                              "   [lnum, cnum]
                              "   [bufnum, lnum, cnum, ...]
                              "   {'lnum' : lnum, 'cnum' : cnum}
                              "
                            
   40              0.000343   if len(a:args) > 1
                                return s:parse_args([a:args])
   40              0.000270   elseif len(a:args) == 1
   40              0.000495     if type(a:args[0]) == v:t_dict
   12              0.000176       return [get(a:args[0], 'lnum'), get(a:args[0], 'cnum')]
   28              0.000067     else
   28              0.000213       if len(a:args[0]) == 2
                                    return a:args[0]
   28              0.000057       else
   28              0.000229         return a:args[0][1:]
                                  endif
                                endif
                              else
                                return a:args
                              endif

FUNCTION  vimtex#delim#get_matching()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:315
Called 12 times
Total time:   0.017763
 Self time:   0.003141

count  total (s)   self (s)
   12              0.000191   if empty(a:delim) || !has_key(a:delim, 'lnum') | return {} | endif
                            
                              "
                              " Get the matching position
                              "
   12   0.000335   0.000239   let l:save_pos = vimtex#pos#get_cursor()
   12   0.001205   0.000231   call vimtex#pos#set_cursor(a:delim)
   12   0.012634   0.000344   let [l:match, l:lnum, l:cnum] = a:delim.get_matching()
   12   0.001556   0.000294   call vimtex#pos#set_cursor(l:save_pos)
                            
                              "
                              " Create the match result
                              "
   12              0.000309   let l:matching = deepcopy(a:delim)
   12              0.000084   let l:matching.lnum = l:lnum
   12              0.000058   let l:matching.cnum = l:cnum
   12              0.000063   let l:matching.match = l:match
   12              0.000068   let l:matching.corr  = a:delim.match
   12              0.000092   let l:matching.side = a:delim.is_open ? 'close' : 'open'
   12              0.000067   let l:matching.is_open = !a:delim.is_open
   12              0.000073   let l:matching.re.corr = a:delim.re.this
   12              0.000065   let l:matching.re.this = a:delim.re.corr
                            
   12              0.000076   if l:matching.type ==# 'delim'
   12              0.000072     let l:matching.corr_delim = a:delim.delim
   12              0.000064     let l:matching.corr_mod = a:delim.mod
   12              0.000066     let l:matching.delim = a:delim.corr_delim
   12              0.000071     let l:matching.mod = a:delim.corr_mod
                              elseif l:matching.type ==# 'env' && has_key(l:matching, 'name')
                                if l:matching.is_open
                                  let l:matching.env_cmd = vimtex#cmd#get_at(l:lnum, l:cnum)
                                else
                                  unlet l:matching.env_cmd
                                endif
   12              0.000029   endif
                            
   12              0.000054   return l:matching

FUNCTION  vimtex#pos#set_cursor()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/pos.vim:7
Called 40 times
Total time:   0.004260
 Self time:   0.001143

count  total (s)   self (s)
   40   0.004205   0.001088   call cursor(s:parse_args(a:000))

FUNCTION  vimtex#syntax#stack()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/syntax.vim:41
Called 17 times
Total time:   0.044706
 Self time:   0.044706

count  total (s)   self (s)
   17              0.000420   let l:pos = a:0 > 0 ? [a:1, a:2] : [line('.'), col('.')]
   17              0.000152   if mode() ==# 'i'
   12              0.000113     let l:pos[1] -= 1
   17              0.000038   endif
   17              0.000360   call map(l:pos, 'max([v:val, 1])')
                            
   17              0.043514   return map(synstack(l:pos[0], l:pos[1]), "synIDattr(v:val, 'name')")

FUNCTION  <SNR>89_get_delim()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:426
Called 16 times
Total time:   0.122806
 Self time:   0.105582

count  total (s)   self (s)
                              "
                              " Arguments:
                              "   opts = {
                              "     'direction'   :  next
                              "                      prev
                              "                      current
                              "     'type'        :  env_tex
                              "                      env_math
                              "                      env_all
                              "                      delim_tex
                              "                      delim_math
                              "                      delim_modq_math (possibly modified math delimiter)
                              "                      delim_mod_math  (modified math delimiter)
                              "                      delim_all
                              "                      all
                              "     'side'        :  open
                              "                      close
                              "                      both
                              "     'syn_exclude' :  Don't match in given syntax
                              "  }
                              "
                              " Returns:
                              "   delim = {
                              "     type    : env | delim
                              "     side    : open | close
                              "     name    : name of environment [only for type env]
                              "     lnum    : number
                              "     cnum    : number
                              "     match   : unparsed matched delimiter
                              "     corr    : corresponding delimiter
                              "     re : {
                              "       open  : regexp for the opening part
                              "       close : regexp for the closing part
                              "     }
                              "     remove  : method to remove the delimiter
                              "   }
                              "
   16   0.000505   0.000356   let l:save_pos = vimtex#pos#get_cursor()
   16              0.000230   let l:re = g:vimtex#delim#re[a:opts.type][a:opts.side]
   16              0.000076   while 1
   16              0.089109     let [l:lnum, l:cnum] = a:opts.direction ==# 'next' ? searchpos(l:re, 'cnW', line('.') + g:vimtex_delim_stopline) : a:opts.direction ==# 'prev'   ? searchpos(l:re, 'bcnW', max([line('.') - g:vimtex_delim_stopline, 1]))   : searchpos(l:re, 'bcnW', line('.'))
   16              0.000351     if l:lnum == 0 | break | endif
                            
   13              0.000269     if has_key(a:opts, 'syn_exclude') && vimtex#syntax#in(a:opts.syn_exclude, l:lnum, l:cnum)
                                  call vimtex#pos#set_cursor(vimtex#pos#prev(l:lnum, l:cnum))
                                  continue
   13              0.000027     endif
                            
   13              0.000035     break
   16              0.000077   endwhile
   16   0.002555   0.000531   call vimtex#pos#set_cursor(l:save_pos)
                            
   16              0.005400   let l:match = matchstr(getline(l:lnum), '^' . l:re, l:cnum-1)
                            
   16              0.000540   if a:opts.direction ==# 'current' && l:cnum + strlen(l:match) + (mode() ==# 'i' ? 1 : 0) <= col('.')
    4              0.000024     let l:match = ''
    4              0.000016     let l:lnum = 0
    4              0.000014     let l:cnum = 0
   16              0.000044   endif
                            
   16              0.000557   let l:result = { 'type' : '', 'lnum' : l:lnum, 'cnum' : l:cnum, 'match' : l:match, 'remove' : function('s:delim_remove'),}
                            
   84              0.000410   for l:type in s:types
   80              0.003414     if l:match =~# '^' . l:type.re
   12   0.015688   0.000637       let l:result = extend( l:type.parser(l:match, l:lnum, l:cnum,               a:opts.side, a:opts.type, a:opts.direction), l:result, 'keep')
   12              0.000033       break
   68              0.000133     endif
   84              0.000267   endfor
                            
   16              0.000207   return empty(l:result.type) ? {} : l:result

FUNCTION  <SNR>89_get_matching_delim()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:825
Called 12 times
Total time:   0.012290
 Self time:   0.012054

count  total (s)   self (s)
   12              0.000038   try
   12   0.011404   0.011168     let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, 'synIDattr(synID(line("."), col("."), 0), "name") =~? "comment"', 0, s:get_timeout())
                              catch /E118/
                                let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, 'synIDattr(synID(line("."), col("."), 0), "name") =~? "comment"', self.gms_stopline)
   12              0.000043   endtry
                            
   12              0.000359   let match = matchstr(getline(lnum), '^' . self.re.corr, cnum-1)
   12              0.000099   return [match, lnum, cnum]

FUNCTION  UltiSnips#TrackChange()
    Defined: ~/.vim/bundle/ultisnips/autoload/UltiSnips.vim:151
Called 19 times
Total time:   4.433120
 Self time:   4.431737

count  total (s)   self (s)
   19   4.433080   4.431697     py3 UltiSnips_Manager._track_change()

FUNCTION  187()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/matchparen.vim:66
Called 16 times
Total time:   0.000711
 Self time:   0.000711

count  total (s)   self (s)
   16              0.000333   silent! call matchdelete(w:vimtex_match_id1)
   16              0.000187   silent! call matchdelete(w:vimtex_match_id2)
   16              0.000108   unlet! w:vimtex_match_id1
   16              0.000055   unlet! w:vimtex_match_id2

FUNCTION  <SNR>89_parser_delim_get_regexp()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:762
Called 24 times
Total time:   0.004790
 Self time:   0.003980

count  total (s)   self (s)
   24              0.000211   let l:type = a:0 > 0 ? a:1 : 'delim_all'
                            
                              " First check for unmatched math delimiter
   24              0.000105   if a:delim ==# '.'
                                return g:vimtex#delim#re.delim_math[a:side ? 'open' : 'close']
   24              0.000050   endif
                            
                              " Next check normal delimiters
   24   0.003710   0.002900   let l:index = index(map(   copy(g:vimtex#delim#lists[l:type].name),   {_, x -> x[a:side]}), a:delim)
   24              0.000377   return l:index >= 0 ? g:vimtex#delim#lists[l:type].re[l:index][a:side] : ''

FUNCTION  vimtex#syntax#in()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/syntax.vim:52
Called 17 times
Total time:   0.045524
 Self time:   0.000818

count  total (s)   self (s)
   17   0.045507   0.000801   return match(call('vimtex#syntax#stack', a:000), '^' . a:name) >= 0

FUNCTION  <SNR>89_parser_delim_get_corr()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:781
Called 12 times
Total time:   0.003703
 Self time:   0.003703

count  total (s)   self (s)
   12              0.000099   let l:type = a:0 > 0 ? a:1 : 'delim_all'
                            
  144              0.000495   for l:pair in g:vimtex#delim#lists[l:type].name
  144              0.000786     if a:delim ==# l:pair[0]
                                  return l:pair[1]
  144              0.000786     elseif a:delim ==# l:pair[1]
   12              0.000055       return l:pair[0]
  132              0.000213     endif
  132              0.000226   endfor

FUNCTION  188()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/matchparen.vim:72
Called 16 times
Total time:   0.190331
 Self time:   0.003677

count  total (s)   self (s)
   16   0.000912   0.000201   call self.clear()
                            
   16   0.045022   0.000409   if vimtex#syntax#in_comment() | return | endif
                            
                              " This is a hack to ensure that $ in visual block mode adhers to the rule
                              " specified in :help v_$
   16              0.000179   if mode() ==# "\<c-v>"
                                let l:pos = vimtex#pos#get_cursor()
                                if len(l:pos) == 5 && l:pos[-1] == 2147483647
                                  call feedkeys('$', 'in')
                                endif
   16              0.000027   endif
                            
   16   0.124004   0.000437   let l:current = vimtex#delim#get_current('all', 'both')
   16              0.000183   if empty(l:current) | return | endif
                            
   12   0.018084   0.000321   let l:corresponding = vimtex#delim#get_matching(l:current)
   12              0.000149   if empty(l:corresponding) | return | endif
   12              0.000139   if empty(l:corresponding.match) | return | endif
                            
   12              0.000175   let [l:open, l:close] = l:current.is_open ? [l:current, l:corresponding] : [l:corresponding, l:current]
                            
   12              0.000541   let w:vimtex_match_id1 = matchaddpos('MatchParen', [[l:open.lnum, l:open.cnum, strlen(l:open.match)]])
   12              0.000334   let w:vimtex_match_id2 = matchaddpos('MatchParen', [[l:close.lnum, l:close.cnum, strlen(l:close.match)]])

FUNCTION  <SNR>89_get_timeout()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:882
Called 12 times
Total time:   0.000236
 Self time:   0.000236

count  total (s)   self (s)
   12              0.000221   return (empty(v:insertmode) ? mode() : v:insertmode) ==# 'i' ? g:vimtex_delim_insert_timeout : g:vimtex_delim_timeout

FUNCTION  vimtex#pos#get_cursor()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/pos.vim:12
Called 28 times
Total time:   0.000245
 Self time:   0.000245

count  total (s)   self (s)
   28              0.000215   return getcurpos()

FUNCTION  vimtex#delim#get_current()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:306
Called 16 times
Total time:   0.123567
 Self time:   0.000761

count  total (s)   self (s)
   16   0.123544   0.000738   return s:get_delim(extend({ 'direction' : 'current', 'type' : a:type, 'side' : a:side,}, get(a:, '1', {})))

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
   19   4.433120   4.431737  UltiSnips#TrackChange()
   16   0.190331   0.003677  188()
   16   0.123567   0.000761  vimtex#delim#get_current()
   16   0.122806   0.105582  <SNR>89_get_delim()
   17   0.045524   0.000818  vimtex#syntax#in()
   17   0.044706             vimtex#syntax#stack()
   16   0.044613   0.000448  vimtex#syntax#in_comment()
   12   0.017763   0.003141  vimtex#delim#get_matching()
   12   0.015051   0.006558  <SNR>89_parser_delim()
   12   0.012290   0.012054  <SNR>89_get_matching_delim()
   24   0.004790   0.003980  <SNR>89_parser_delim_get_regexp()
   40   0.004260   0.001143  vimtex#pos#set_cursor()
   27   0.003864   0.001116  3()
   12   0.003703             <SNR>89_parser_delim_get_corr()
   31   0.003591             4()
   40   0.003117             <SNR>101_parse_args()
    1   0.001383   0.000024  vimtex#syntax#in_mathzone()
   16   0.000711             187()
   28   0.000245             vimtex#pos#get_cursor()
   12   0.000236             <SNR>89_get_timeout()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
   19   4.433120   4.431737  UltiSnips#TrackChange()
   16   0.122806   0.105582  <SNR>89_get_delim()
   17              0.044706  vimtex#syntax#stack()
   12   0.012290   0.012054  <SNR>89_get_matching_delim()
   12   0.015051   0.006558  <SNR>89_parser_delim()
   24   0.004790   0.003980  <SNR>89_parser_delim_get_regexp()
   12              0.003703  <SNR>89_parser_delim_get_corr()
   16   0.190331   0.003677  188()
   31              0.003591  4()
   12   0.017763   0.003141  vimtex#delim#get_matching()
   40              0.003117  <SNR>101_parse_args()
   40   0.004260   0.001143  vimtex#pos#set_cursor()
   27   0.003864   0.001116  3()
   17   0.045524   0.000818  vimtex#syntax#in()
   16   0.123567   0.000761  vimtex#delim#get_current()
   16              0.000711  187()
   16   0.044613   0.000448  vimtex#syntax#in_comment()
   28              0.000245  vimtex#pos#get_cursor()
   12              0.000236  <SNR>89_get_timeout()
    1   0.001383   0.000024  vimtex#syntax#in_mathzone()

