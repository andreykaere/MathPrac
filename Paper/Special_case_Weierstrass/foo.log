FUNCTION  3()
    Defined: ~/.vim/bundle/vim-matchup/autoload/matchup/matchparen.vim:303
Called 602 times
Total time:   0.074224
 Self time:   0.019645

count  total (s)   self (s)
  602              0.010425   if !get(b:, 'matchup_matchparen_deferred', g:matchup_matchparen_deferred)
  602   0.062663   0.008084     return s:matchparen.highlight()
                              endif
                            
                              if !exists('w:matchup_timer')
                                let s:show_delay = g:matchup_matchparen_deferred_show_delay
                                let s:hide_delay = g:matchup_matchparen_deferred_hide_delay
                                let w:matchup_timer = timer_start(s:show_delay, function('s:timer_callback', [ win_getid() ]), {'repeat': -1})
                                if !exists('w:matchup_need_clear')
                                  let w:matchup_need_clear = 0
                                endif
                                let s:fade_time = g:matchup_matchparen_deferred_fade_time
                                if s:fade_time > 0
                                  let w:matchup_fade_timer = timer_start(s:fade_time, function('s:fade_timer_callback', [ win_getid() ]), {'repeat': -1})
                                  call timer_pause(w:matchup_fade_timer, 1)
                                endif
                              endif
                            
                              " keep the timer alive with a heartbeat
                              let w:matchup_pulse_time = reltime()
                            
                              " if the timer is paused, some time has passed
                              if timer_info(w:matchup_timer)[0].paused
                                " unpause the timer
                                call timer_pause(w:matchup_timer, 0)
                            
                                " set the hi time to the pulse time
                                let w:matchup_hi_time = w:matchup_pulse_time
                              endif

FUNCTION  4()
    Defined: ~/.vim/bundle/vim-matchup/autoload/matchup/matchparen.vim:342
Called 624 times
Total time:   0.057217
 Self time:   0.057217

count  total (s)   self (s)
  624              0.006042   if !g:matchup_matchparen_enabled | return | endif
                            
  624              0.011223   if has('vim_starting') | return | endif
                            
  624              0.005737   if !g:matchup_matchparen_pumvisible && pumvisible() | return | endif
                            
                              " try to avoid interfering with some auto-complete plugins
  624              0.009505   if has('*state') && state('a') !=# '' | return | endif
                            
  624              0.009986   if !get(b:, 'matchup_matchparen_enabled', 1) && get(b:, 'matchup_matchparen_fallback', 1) && s:pi_paren_sid()
                                return call(s:pi_paren_fcn, [])
  624              0.001010   endif
                            
  624              0.004884   if !get(b:, 'matchup_matchparen_enabled', 1) | return | endif
                            
                              let l:force_update    = a:0 >= 1 ? a:1 : 0
                              let l:changing_insert = a:0 >= 2 ? a:2 : 0
                              let l:real_mode = l:changing_insert ? v:insertmode : mode()
                            
                              if !l:force_update && exists('w:last_changedtick') && exists('w:last_cursor') && matchup#pos#equal(w:last_cursor, matchup#pos#get_cursor()) && w:last_changedtick == b:changedtick
                                return
                              endif
                              let w:last_changedtick = b:changedtick
                              let w:last_cursor = matchup#pos#get_cursor()
                            
                              call matchup#perf#tic('matchparen.highlight')
                            
                              " request eventual clearing of stale matches
                              let l:token = {}
                              call self.fade(0, [], l:token)
                            
                              let l:modes = g:matchup_matchparen_nomode
                              if get(g:, 'matchup_matchparen_novisual', 0)  " deprecated option name
                                let l:modes .= "vV\<c-v>"
                              endif
                              if stridx(l:modes, l:real_mode) >= 0
                                return
                              endif
                            
                              " prevent problems in visual block mode at the end of a line
                              if get(matchup#pos#get_cursor(), 4, 0) == 2147483647 && "v\<c-v>" =~? mode()
                                return
                              endif
                            
                              " don't get matches when inside a closed fold
                              if foldclosed(line('.')) > -1
                                return
                              endif
                            
                              " give up when cursor is far into a very long line
                              if &synmaxcol && col('.') > &synmaxcol
                                return
                              endif
                            
                              " in insert mode, cursor is treated as being one behind
                              let l:insertmode = l:real_mode ==# 'i'
                            
                              " start the timeout period
                              let l:timeout = l:insertmode ? get(b:, 'matchup_matchparen_insert_timeout',           g:matchup_matchparen_insert_timeout) : get(b:, 'matchup_matchparen_timeout',           g:matchup_matchparen_timeout)
                              call matchup#perf#timeout_start(l:timeout)
                            
                              let l:current = matchup#delim#get_current('all', 'both_all', { 'insertmode': l:insertmode,   'stopline': g:matchup_matchparen_stopline,   'highlighting': 1, })
                              call matchup#perf#toc('matchparen.highlight', 'get_current')
                            
                              if get(b:, 'matchup_matchparen_deferred', g:matchup_matchparen_deferred)
                                let l:hsa = get(b:, 'matchup_matchparen_hi_surround_always', g:matchup_matchparen_hi_surround_always)
                                if l:hsa > 0 && empty(l:current) || l:hsa > 1
                                  call s:highlight_surrounding(l:insertmode, !empty(l:current))
                                endif
                              endif
                            
                              if empty(l:current)
                                return
                              endif
                            
                              let l:corrlist = matchup#delim#get_matching(l:current, { 'stopline': g:matchup_matchparen_stopline,   'highlighting': 1, })
                              call matchup#perf#toc('matchparen.highlight', 'get_matching')
                              if empty(l:corrlist) | return | endif
                            
                              if g:matchup_transmute_enabled
                                if !exists('w:matchup_matchparen_context')
                                  let w:matchup_matchparen_context = { 'normal': {   'current':   {},   'corrlist':  [],  }, 'prior': {}, 'counter': 0,}
                                endif
                            
                                let w:matchup_matchparen_context.counter += 1
                            
                                if !l:insertmode
                                  let w:matchup_matchparen_context.prior = copy(w:matchup_matchparen_context.normal)
                            
                                  let w:matchup_matchparen_context.normal.current = l:current
                                  let w:matchup_matchparen_context.normal.corrlist = l:corrlist
                                endif
                            
                                " if transmuted, highlight again (will reset timeout)
                                if matchup#transmute#tick(l:insertmode)
                                  " no force_update here because it would screw up prior
                                  return s:matchparen.highlight(0, l:changing_insert)
                                endif
                              endif
                            
                              if !has_key(l:current, 'match_index') || len(l:corrlist) <= (l:current.side ==# 'mid' ? 2 : 1) && !g:matchup_matchparen_singleton
                                " TODO this doesn't catch every case, needs refactor
                                " TODO singleton doesn't work right for mids
                                return
                              endif
                            
                              " prepare for (possibly) new highlights
                              let l:pos = [l:current.lnum, l:current.cnum]
                              if self.fade(1, l:pos, l:token)
                                return
                              endif
                            
                              " store flag meaning highlighting is active
                              let w:matchup_need_clear = 1
                            
                              " disable off-screen when scrolling with j/k
                              let l:scrolling = get(g:matchup_matchparen_offscreen, 'scrolloff', 0) && winheight(0) > 2*&scrolloff && (line('.') == line('w$')-&scrolloff     && line('$') != line('w$')     || line('.') == line('w0')+&scrolloff)
                            
                              " show off-screen matches
                              let l:method = get(g:matchup_matchparen_offscreen, 'method', '')
                              if !empty(l:method) && l:method !=# 'none' && !l:current.skip && !l:scrolling && winheight(0) > 0
                                call s:do_offscreen(l:current, l:method)
                              endif
                            
                              " add highlighting matches
                              call s:add_matches(l:corrlist, l:current)
                            
                              " highlight the background between parentheses
                              if g:matchup_matchparen_hi_background >= 1
                                call s:highlight_background(l:corrlist)
                              endif
                            
                              " new highlights done, request fade away
                              call self.fade(2, l:pos, l:token)
                            
                              call matchup#perf#toc('matchparen.highlight', 'end')

FUNCTION  <SNR>89_parser_delim()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:663
Called 255 times
Total time:   0.295745
 Self time:   0.127831

count  total (s)   self (s)
  255              0.001773   let result = {}
  255              0.001788   let result.type = 'delim'
  255              0.039423   let result.side = a:match =~# g:vimtex#delim#re.delim_all.open ? 'open' : 'close'
  255              0.002162   let result.is_open = result.side ==# 'open'
  255              0.004273   let result.get_matching = function('s:get_matching_delim')
  255              0.001605   let result.gms_flags = result.is_open ? 'nW' : 'bnW'
  255              0.004917   let result.gms_stopline = result.is_open ? line('.') + g:vimtex_delim_stopline : max([1, line('.') - g:vimtex_delim_stopline])
                            
                              "
                              " Find corresponding delimiter and the regexps
                              "
  255              0.015515   if a:match =~# '^' . g:vimtex#delim#re.mods.both
                                let m1 = matchstr(a:match, '^' . g:vimtex#delim#re.mods.both)
                                let d1 = substitute(strpart(a:match, len(m1)), '^\s*', '', '')
                                let s1 = !result.is_open
                                let re1 = s:parser_delim_get_regexp(m1, s1, 'mods')  . '\s*' . s:parser_delim_get_regexp(d1, s1, 'delim_math')
                            
                                let m2 = s:parser_delim_get_corr(m1, 'mods')
                                let d2 = s:parser_delim_get_corr(d1, 'delim_math')
                                let s2 = result.is_open
                                let re2 = s:parser_delim_get_regexp(m2, s2, 'mods') . '\s*' . (m1 =~# '\\\%(left\|right\)'   ? '\%(' . s:parser_delim_get_regexp(d2, s2, 'delim_math') . '\|\.\)'   : s:parser_delim_get_regexp(d2, s2, 'delim_math'))
  255              0.000664   else
  255              0.001334     let d1 = a:match
  255              0.000972     let m1 = ''
  255   0.059009   0.006672     let re1 = s:parser_delim_get_regexp(a:match, !result.is_open)
                            
  255   0.077739   0.006033     let d2 = s:parser_delim_get_corr(a:match)
  255              0.000979     let m2 = ''
  255   0.049482   0.005611     let re2 = s:parser_delim_get_regexp(d2, result.is_open)
  255              0.000534   endif
                            
  255              0.001432   let result.delim = d1
  255              0.001019   let result.mod = m1
  255              0.001528   let result.corr = m2 . d2
  255              0.001149   let result.corr_delim = d2
  255              0.001037   let result.corr_mod = m2
  255              0.004767   let result.re = { 'this'  : re1, 'corr'  : re2, 'open'  : result.is_open ? re1 : re2, 'close' : result.is_open ? re2 : re1,}
                            
  255              0.000849   return result

FUNCTION  <SNR>86_get_cmd()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/cmd.vim:595
Called 2 times
Total time:   0.017690
 Self time:   0.000592

count  total (s)   self (s)
    2   0.000144   0.000035   let [lnum, cnum, match] = s:get_cmd_name(a:direction ==# 'next')
    2              0.000018   if lnum == 0 | return {} | endif
                            
    2              0.000048   let res = { 'name' : match, 'text' : '', 'pos_start' : { 'lnum' : lnum, 'cnum' : cnum }, 'pos_end' : { 'lnum' : lnum, 'cnum' : cnum + strlen(match) - 1 }, 'args' : [],}
                            
                              " Environments always start with environment name and allows option
                              " afterwords
    2              0.000008   if res.name ==# '\begin'
    2   0.006256   0.000034     let arg = s:get_cmd_part('{', res.pos_end)
    2              0.000019     if empty(arg) | return res | endif
                            
    2              0.000015     call add(res.args, arg)
    2              0.000009     let res.pos_end.lnum = arg.close.lnum
    2              0.000007     let res.pos_end.cnum = arg.close.cnum
    2              0.000002   endif
                            
                              " Get overlay specification
    2   0.000162   0.000076   let res.overlay = s:get_cmd_overlay(res.pos_end.lnum, res.pos_end.cnum)
    2              0.000010   if !empty(res.overlay)
                                let res.pos_end.lnum = res.overlay.close.lnum
                                let res.pos_end.cnum = res.overlay.close.cnum
    2              0.000004   endif
                            
                              " Get options
    2   0.006517   0.000041   let res.opt = s:get_cmd_part('[', res.pos_end)
    2              0.000011   if !empty(res.opt)
                                let res.pos_end.lnum = res.opt.close.lnum
                                let res.pos_end.cnum = res.opt.close.cnum
    2              0.000003   endif
                            
                              " Get arguments
    2   0.004132   0.000047   let arg = s:get_cmd_part('{', res.pos_end)
    2              0.000011   while !empty(arg)
                                call add(res.args, arg)
                                let res.pos_end.lnum = arg.close.lnum
                                let res.pos_end.cnum = arg.close.cnum
                                let arg = s:get_cmd_part('{', res.pos_end)
    2              0.000005   endwhile
                            
                              " Include entire cmd text
    2   0.000199   0.000079   let res.text = s:text_between(res.pos_start, res.pos_end, 1)
                            
    2              0.000006   return res

FUNCTION  <SNR>131_compensate_for_pum()
    Defined: ~/.vim/bundle/ultisnips/autoload/UltiSnips.vim:10
Called 1 time
Total time:   0.000062
 Self time:   0.000062

count  total (s)   self (s)
                                """ The CursorMovedI event is not triggered while the popup-menu is visible,
                                """ and it's by this event that UltiSnips updates its vim-state. The fix is
                                """ to explicitly check for the presence of the popup menu, and update
                                """ the vim-state accordingly.
    1              0.000020     if pumvisible()
                                    py3 UltiSnips_Manager._cursor_moved()
    1              0.000006     endif

FUNCTION  <SNR>86_get_cmd_overlay()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/cmd.vim:687
Called 2 times
Total time:   0.000086
 Self time:   0.000086

count  total (s)   self (s)
    2              0.000043   let l:match = matchstr(getline(a:lnum), '^\s*[^>]*>', a:cnum)
                            
    2              0.000039   return empty(l:match) ? {} : {    'open' : {'lnum' : a:lnum, 'cnum' : a:cnum + 1},    'close' : {'lnum' : a:lnum, 'cnum' : a:cnum + strlen(l:match)},    'text' : l:match   }

FUNCTION  vimtex#syntax#in_mathzone()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/syntax.vim:62
Called 7 times
Total time:   0.004755
 Self time:   0.000141

count  total (s)   self (s)
    7   0.004744   0.000130   return call('vimtex#syntax#in', ['texMathZone'] + a:000)

FUNCTION  vimtex#syntax#in_comment()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/syntax.vim:57
Called 314 times
Total time:   0.526778
 Self time:   0.008709

count  total (s)   self (s)
  314   0.526470   0.008401   return call('vimtex#syntax#in', ['texComment'] + a:000)

FUNCTION  <SNR>89_parser_env()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:538
Called 2 times
Total time:   0.000321
 Self time:   0.000321

count  total (s)   self (s)
    2              0.000010   let result = {}
                            
    2              0.000011   let result.type = 'env'
    2              0.000040   let result.name = matchstr(a:match, '{\zs\k*\ze\*\?}')
    2              0.000023   let result.starred = match(a:match, '\*}$') > 0
    2              0.000020   let result.side = a:match =~# '\\begin' ? 'open' : 'close'
    2              0.000010   let result.is_open = result.side ==# 'open'
    2              0.000024   let result.get_matching = function('s:get_matching_env')
                            
    2              0.000010   let result.gms_flags = result.is_open ? 'nW' : 'bnW'
    2              0.000032   let result.gms_stopline = result.is_open ? line('.') + g:vimtex_delim_stopline : max([1, line('.') - g:vimtex_delim_stopline])
                            
    2              0.000006   if result.is_open
                                let result.env_cmd = vimtex#cmd#get_at(a:lnum, a:cnum)
    2              0.000003   endif
                            
    2              0.000038   let result.corr = result.is_open ? substitute(a:match, 'begin', 'end', '') : substitute(a:match, 'end', 'begin', '')
                            
    2              0.000026   let result.re = { 'open' : '\m\\begin\s*{' . result.name . '\*\?}', 'close' : '\m\\end\s*{' . result.name . '\*\?}',}
                            
    2              0.000016   let result.re.this = result.is_open ? result.re.open  : result.re.close
    2              0.000013   let result.re.corr = result.is_open ? result.re.close : result.re.open
                            
    2              0.000008   return result

FUNCTION  UltiSnips#ExpandSnippetOrJump()
    Defined: ~/.vim/bundle/ultisnips/autoload/UltiSnips.vim:84
Called 1 time
Total time:   0.035271
 Self time:   0.035206

count  total (s)   self (s)
    1   0.000132   0.000070     call s:compensate_for_pum()
    1   0.035134   0.035131     py3 UltiSnips_Manager.expand_or_jump()
                                return ""

FUNCTION  vimtex#delim#get_next()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:288
Called 6 times
Total time:   0.012326
 Self time:   0.000222

count  total (s)   self (s)
    6   0.012319   0.000215   return s:get_delim(extend({ 'direction' : 'next', 'type' : a:type, 'side' : a:side,}, get(a:, '1', {})))

FUNCTION  <SNR>101_parse_args()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/pos.vim:67
Called 850 times
Total time:   0.057534
 Self time:   0.057439

count  total (s)   self (s)
                              "
                              " The arguments should be in one of the following forms (when unpacked):
                              "
                              "   [lnum, cnum]
                              "   [bufnum, lnum, cnum, ...]
                              "   {'lnum' : lnum, 'cnum' : cnum}
                              "
                            
  850              0.006591   if len(a:args) > 1
    2              0.000014     return s:parse_args([a:args])
  848              0.004854   elseif len(a:args) == 1
  848              0.009116     if type(a:args[0]) == v:t_dict
  261              0.003535       return [get(a:args[0], 'lnum'), get(a:args[0], 'cnum')]
  587              0.001192     else
  587              0.003742       if len(a:args[0]) == 2
    2              0.000007         return a:args[0]
  585              0.000977       else
  585              0.004396         return a:args[0][1:]
                                  endif
                                endif
                              else
                                return a:args
                              endif

FUNCTION  vimtex#delim#get_matching()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:315
Called 253 times
Total time:   0.362474
 Self time:   0.057593

count  total (s)   self (s)
  253              0.003789   if empty(a:delim) || !has_key(a:delim, 'lnum') | return {} | endif
                            
                              "
                              " Get the matching position
                              "
  253   0.005726   0.003924   let l:save_pos = vimtex#pos#get_cursor()
  253   0.023479   0.004497   call vimtex#pos#set_cursor(a:delim)
  253   0.249485   0.006522   let [l:match, l:lnum, l:cnum] = a:delim.get_matching()
  253   0.028653   0.005393   call vimtex#pos#set_cursor(l:save_pos)
                            
                              "
                              " Create the match result
                              "
  253              0.005173   let l:matching = deepcopy(a:delim)
  253              0.001604   let l:matching.lnum = l:lnum
  253              0.001010   let l:matching.cnum = l:cnum
  253              0.001153   let l:matching.match = l:match
  253              0.001205   let l:matching.corr  = a:delim.match
  253              0.001640   let l:matching.side = a:delim.is_open ? 'close' : 'open'
  253              0.001230   let l:matching.is_open = !a:delim.is_open
  253              0.001366   let l:matching.re.corr = a:delim.re.this
  253              0.001190   let l:matching.re.this = a:delim.re.corr
                            
  253              0.001283   if l:matching.type ==# 'delim'
  251              0.001214     let l:matching.corr_delim = a:delim.delim
  251              0.001114     let l:matching.corr_mod = a:delim.mod
  251              0.001088     let l:matching.delim = a:delim.corr_delim
  251              0.001050     let l:matching.mod = a:delim.corr_mod
    2              0.000016   elseif l:matching.type ==# 'env' && has_key(l:matching, 'name')
    2              0.000007     if l:matching.is_open
    2              0.004792       let l:matching.env_cmd = vimtex#cmd#get_at(l:lnum, l:cnum)
                                else
                                  unlet l:matching.env_cmd
    2              0.000003     endif
  253              0.000388   endif
                            
  253              0.000892   return l:matching

FUNCTION  vimtex#pos#set_cursor()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/pos.vim:7
Called 844 times
Total time:   0.077791
 Self time:   0.020551

count  total (s)   self (s)
  844   0.076847   0.019607   call cursor(s:parse_args(a:000))

FUNCTION  vimtex#syntax#stack()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/syntax.vim:41
Called 321 times
Total time:   0.507446
 Self time:   0.507446

count  total (s)   self (s)
  321              0.008365   let l:pos = a:0 > 0 ? [a:1, a:2] : [line('.'), col('.')]
  321              0.002833   if mode() ==# 'i'
  291              0.003076     let l:pos[1] -= 1
  321              0.000770   endif
  321              0.007285   call map(l:pos, 'max([v:val, 1])')
                            
  321              0.483614   return map(synstack(l:pos[0], l:pos[1]), "synIDattr(v:val, 'name')")

FUNCTION  UltiSnips#CursorMoved()
    Defined: ~/.vim/bundle/ultisnips/autoload/UltiSnips.vim:157
Called 282 times
Total time:   0.202946
 Self time:   0.202941

count  total (s)   self (s)
  282   0.202417   0.202412     py3 UltiSnips_Manager._cursor_moved()

FUNCTION  <SNR>89_get_delim()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:426
Called 320 times
Total time:   2.221246
 Self time:   1.888299

count  total (s)   self (s)
                              "
                              " Arguments:
                              "   opts = {
                              "     'direction'   :  next
                              "                      prev
                              "                      current
                              "     'type'        :  env_tex
                              "                      env_math
                              "                      env_all
                              "                      delim_tex
                              "                      delim_math
                              "                      delim_modq_math (possibly modified math delimiter)
                              "                      delim_mod_math  (modified math delimiter)
                              "                      delim_all
                              "                      all
                              "     'side'        :  open
                              "                      close
                              "                      both
                              "     'syn_exclude' :  Don't match in given syntax
                              "  }
                              "
                              " Returns:
                              "   delim = {
                              "     type    : env | delim
                              "     side    : open | close
                              "     name    : name of environment [only for type env]
                              "     lnum    : number
                              "     cnum    : number
                              "     match   : unparsed matched delimiter
                              "     corr    : corresponding delimiter
                              "     re : {
                              "       open  : regexp for the opening part
                              "       close : regexp for the closing part
                              "     }
                              "     remove  : method to remove the delimiter
                              "   }
                              "
  320   0.009454   0.006547   let l:save_pos = vimtex#pos#get_cursor()
  320              0.004168   let l:re = g:vimtex#delim#re[a:opts.type][a:opts.side]
  320              0.001492   while 1
  320              1.601972     let [l:lnum, l:cnum] = a:opts.direction ==# 'next' ? searchpos(l:re, 'cnW', line('.') + g:vimtex_delim_stopline) : a:opts.direction ==# 'prev'   ? searchpos(l:re, 'bcnW', max([line('.') - g:vimtex_delim_stopline, 1]))   : searchpos(l:re, 'bcnW', line('.'))
  320              0.005106     if l:lnum == 0 | break | endif
                            
  288              0.004679     if has_key(a:opts, 'syn_exclude') && vimtex#syntax#in(a:opts.syn_exclude, l:lnum, l:cnum)
                                  call vimtex#pos#set_cursor(vimtex#pos#prev(l:lnum, l:cnum))
                                  continue
  288              0.000590     endif
                            
  288              0.000702     break
  320              0.001250   endwhile
  320   0.042385   0.008411   call vimtex#pos#set_cursor(l:save_pos)
                            
  320              0.096252   let l:match = matchstr(getline(l:lnum), '^' . l:re, l:cnum-1)
                            
  320              0.008463   if a:opts.direction ==# 'current' && l:cnum + strlen(l:match) + (mode() ==# 'i' ? 1 : 0) <= col('.')
   63              0.000339     let l:match = ''
   63              0.000251     let l:lnum = 0
   63              0.000246     let l:cnum = 0
  320              0.000694   endif
                            
  320              0.009986   let l:result = { 'type' : '', 'lnum' : l:lnum, 'cnum' : l:cnum, 'match' : l:match, 'remove' : function('s:delim_remove'),}
                            
 1655              0.006774   for l:type in s:types
 1592              0.058515     if l:match =~# '^' . l:type.re
  257   0.309200   0.013134       let l:result = extend( l:type.parser(l:match, l:lnum, l:cnum,               a:opts.side, a:opts.type, a:opts.direction), l:result, 'keep')
  257              0.000679       break
 1335              0.002213     endif
 1655              0.004220   endfor
                            
  320              0.003275   return empty(l:result.type) ? {} : l:result

FUNCTION  <SNR>89_get_matching_delim()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:825
Called 251 times
Total time:   0.240609
 Self time:   0.236178

count  total (s)   self (s)
  251              0.000687   try
  251   0.225238   0.220807     let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, 'synIDattr(synID(line("."), col("."), 0), "name") =~? "comment"', 0, s:get_timeout())
                              catch /E118/
                                let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, 'synIDattr(synID(line("."), col("."), 0), "name") =~? "comment"', self.gms_stopline)
  251              0.000787   endtry
                            
  251              0.006539   let match = matchstr(getline(lnum), '^' . self.re.corr, cnum-1)
  251              0.001664   return [match, lnum, cnum]

FUNCTION  <SNR>86_text_between()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/cmd.vim:701
Called 8 times
Total time:   0.000606
 Self time:   0.000606

count  total (s)   self (s)
    8              0.000087   let [l1, c1] = [a:p1.lnum, a:p1.cnum - (a:0 > 0)]
    8              0.000055   let [l2, c2] = [a:p2.lnum, a:p2.cnum - (a:0 <= 0)]
                            
    8              0.000060   let lines = getline(l1, l2)
    8              0.000039   if !empty(lines)
    8              0.000084     let lines[0] = strpart(lines[0], c1)
    8              0.000186     let lines[-1] = strpart(lines[-1], 0, l1 == l2 ? c2 - c1 : c2)
    8              0.000016   endif
    8              0.000055   return join(lines, "\n")

FUNCTION  UltiSnips#TrackChange()
    Defined: ~/.vim/bundle/ultisnips/autoload/UltiSnips.vim:176
Called 569 times
Total time:  14.940843
 Self time:  14.936085

count  total (s)   self (s)
  569  14.939054  14.934296     py3 UltiSnips_Manager._track_change()

FUNCTION  <SNR>86_get_cmd_name()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/cmd.vim:648
Called 2 times
Total time:   0.000109
 Self time:   0.000109

count  total (s)   self (s)
    2              0.000049   let [l:lnum, l:cnum] = searchpos('\v\\\a+\*?', a:next ? 'nW' : 'cbnW')
    2              0.000045   let l:match = matchstr(getline(l:lnum), '^\v\\\a*\*?', l:cnum-1)
    2              0.000012   return [l:lnum, l:cnum, l:match]

FUNCTION  187()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/matchparen.vim:66
Called 314 times
Total time:   0.013467
 Self time:   0.013467

count  total (s)   self (s)
  314              0.006073   silent! call matchdelete(w:vimtex_match_id1)
  314              0.003592   silent! call matchdelete(w:vimtex_match_id2)
  314              0.002097   unlet! w:vimtex_match_id1
  314              0.001109   unlet! w:vimtex_match_id2

FUNCTION  <SNR>89_parser_delim_get_regexp()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:762
Called 510 times
Total time:   0.096208
 Self time:   0.078937

count  total (s)   self (s)
  510              0.004141   let l:type = a:0 > 0 ? a:1 : 'delim_all'
                            
                              " First check for unmatched math delimiter
  510              0.002075   if a:delim ==# '.'
                                return g:vimtex#delim#re.delim_math[a:side ? 'open' : 'close']
  510              0.000963   endif
                            
                              " Next check normal delimiters
  510   0.074704   0.057433   let l:index = index(map(   copy(g:vimtex#delim#lists[l:type].name),   {_, x -> x[a:side]}), a:delim)
  510              0.007490   return l:index >= 0 ? g:vimtex#delim#lists[l:type].re[l:index][a:side] : ''

FUNCTION  vimtex#syntax#in()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/syntax.vim:52
Called 321 times
Total time:   0.522683
 Self time:   0.015237

count  total (s)   self (s)
  321   0.522292   0.014846   return match(call('vimtex#syntax#stack', a:000), '^' . a:name) >= 0

FUNCTION  <SNR>89_parser_delim_get_corr()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:781
Called 255 times
Total time:   0.071706
 Self time:   0.071706

count  total (s)   self (s)
  255              0.001942   let l:type = a:0 > 0 ? a:1 : 'delim_all'
                            
 3006              0.009033   for l:pair in g:vimtex#delim#lists[l:type].name
 3006              0.015335     if a:delim ==# l:pair[0]
   10              0.000035       return l:pair[1]
 2996              0.014963     elseif a:delim ==# l:pair[1]
  245              0.001065       return l:pair[0]
 2751              0.004013     endif
 2751              0.004594   endfor

FUNCTION  188()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/matchparen.vim:72
Called 314 times
Total time:   3.192179
 Self time:   0.067542

count  total (s)   self (s)
  314   0.016673   0.003206   call self.clear()
                            
  314   0.534740   0.007962   if vimtex#syntax#in_comment() | return | endif
                            
                              " This is a hack to ensure that $ in visual block mode adhers to the rule
                              " specified in :help v_$
  314              0.003317   if mode() ==# "\<c-v>"
                                let l:pos = vimtex#pos#get_cursor()
                                if len(l:pos) == 5 && l:pos[-1] == 2147483647
                                  call feedkeys('$', 'in')
                                endif
  314              0.000567   endif
                            
  314   2.232406   0.008460   let l:current = vimtex#delim#get_current('all', 'both')
  314              0.003163   if empty(l:current) | return | endif
                            
  251   0.366630   0.006184   let l:corresponding = vimtex#delim#get_matching(l:current)
  251              0.002465   if empty(l:corresponding) | return | endif
  251              0.002095   if empty(l:corresponding.match) | return | endif
                            
  245              0.003273   let [l:open, l:close] = l:current.is_open ? [l:current, l:corresponding] : [l:corresponding, l:current]
                            
  245              0.009317   let w:vimtex_match_id1 = matchaddpos('MatchParen', [[l:open.lnum, l:open.cnum, strlen(l:open.match)]])
  245              0.006232   let w:vimtex_match_id2 = matchaddpos('MatchParen', [[l:close.lnum, l:close.cnum, strlen(l:close.match)]])

FUNCTION  <SNR>89_get_timeout()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:882
Called 253 times
Total time:   0.004463
 Self time:   0.004463

count  total (s)   self (s)
  253              0.004198   return (empty(v:insertmode) ? mode() : v:insertmode) ==# 'i' ? g:vimtex_delim_insert_timeout : g:vimtex_delim_timeout

FUNCTION  <SNR>86_get_cmd_part()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/cmd.vim:655
Called 6 times
Total time:   0.016783
 Self time:   0.000835

count  total (s)   self (s)
    6   0.000152   0.000111   let l:save_pos = vimtex#pos#get_cursor()
    6   0.000589   0.000083   call vimtex#pos#set_cursor(a:start_pos)
    6   0.012429   0.000103   let l:open = vimtex#delim#get_next('delim_tex', 'open')
    6   0.000709   0.000148   call vimtex#pos#set_cursor(l:save_pos)
                            
                              "
                              " Ensure that the delimiter
                              " 1) exists,
                              " 2) is of the right type,
                              " 3) and is the next non-whitespace character.
                              "
    6   0.000571   0.000215   if empty(l:open) || l:open.match !=# a:part || strlen(substitute(        s:text_between(a:start_pos, l:open), '\_s', '', 'g')) != 0
    4              0.000013     return {}
    2              0.000004   endif
                            
    2   0.002053   0.000025   let l:close = vimtex#delim#get_matching(l:open)
    2              0.000010   if empty(l:close)
                                return {}
    2              0.000004   endif
                            
    2   0.000190   0.000060   return { 'open' : l:open, 'close' : l:close, 'text' : s:text_between(l:open, l:close),}

FUNCTION  vimtex#pos#val()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/pos.vim:24
Called 4 times
Total time:   0.000320
 Self time:   0.000121

count  total (s)   self (s)
    4   0.000276   0.000077   let [l:lnum, l:cnum; l:rest] = s:parse_args(a:000)
                            
    4              0.000039   return 100000*l:lnum + min([l:cnum, 90000])

FUNCTION  vimtex#pos#get_cursor()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/pos.vim:12
Called 583 times
Total time:   0.004778
 Self time:   0.004778

count  total (s)   self (s)
  583              0.004217   return getcurpos()

FUNCTION  UltiSnips#LeavingInsertMode()
    Defined: ~/.vim/bundle/ultisnips/autoload/UltiSnips.vim:172
Called 11 times
Total time:   0.001568
 Self time:   0.001568

count  total (s)   self (s)
   11              0.001544     py3 UltiSnips_Manager._leaving_insert_mode()

FUNCTION  vimtex#delim#get_current()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:306
Called 314 times
Total time:   2.223946
 Self time:   0.014804

count  total (s)   self (s)
  314   2.223476   0.014334   return s:get_delim(extend({ 'direction' : 'current', 'type' : a:type, 'side' : a:side,}, get(a:, '1', {})))

FUNCTION  vimtex#cmd#get_at()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/cmd.vim:546
Called 2 times
Total time:   0.018909
 Self time:   0.000130

count  total (s)   self (s)
    2   0.000038   0.000024   let l:pos_saved = vimtex#pos#get_cursor()
    2   0.000202   0.000032   call call('vimtex#pos#set_cursor', a:000)
    2   0.018462   0.000032   let l:cmd = vimtex#cmd#get_current()
    2   0.000199   0.000034   call vimtex#pos#set_cursor(l:pos_saved)
    2              0.000006   return l:cmd

FUNCTION  <SNR>89_get_matching_env()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/delim.vim:795
Called 2 times
Total time:   0.002354
 Self time:   0.002322

count  total (s)   self (s)
    2              0.000005   try
    2   0.002235   0.002203     let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, '', 0, s:get_timeout())
                              catch /E118/
                                let [lnum, cnum] = searchpairpos(self.re.open, '', self.re.close, self.gms_flags, '', self.gms_stopline)
    2              0.000007   endtry
                            
    2              0.000055   let match = matchstr(getline(lnum), '^' . self.re.corr, cnum-1)
    2              0.000012   return [match, lnum, cnum]

FUNCTION  vimtex#cmd#get_current()
    Defined: ~/.vim/bundle/vimtex/autoload/vimtex/cmd.vim:521
Called 2 times
Total time:   0.018430
 Self time:   0.000233

count  total (s)   self (s)
    2   0.000038   0.000024   let l:save_pos = vimtex#pos#get_cursor()
    2   0.000182   0.000027   let l:pos_val_cursor = vimtex#pos#val(l:save_pos)
                            
    2              0.000007   let l:depth = 3
    2              0.000009   while l:depth > 0
    2              0.000010     let l:depth -= 1
    2   0.017720   0.000030     let l:cmd = s:get_cmd('prev')
    2              0.000017     if empty(l:cmd) | break | endif
                            
    2   0.000203   0.000038     let l:pos_val = vimtex#pos#val(l:cmd.pos_end)
    2              0.000013     if l:pos_val >= l:pos_val_cursor
    2   0.000210   0.000037       call vimtex#pos#set_cursor(l:save_pos)
    2              0.000010       return l:cmd
                                else
                                  call vimtex#pos#set_cursor(vimtex#pos#prev(l:cmd.pos_start))
                                endif
                              endwhile
                            
                              call vimtex#pos#set_cursor(l:save_pos)
                            
                              return {}

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
  569  14.940843  14.936085  UltiSnips#TrackChange()
  314   3.192179   0.067542  188()
  314   2.223946   0.014804  vimtex#delim#get_current()
  320   2.221246   1.888299  <SNR>89_get_delim()
  314   0.526778   0.008709  vimtex#syntax#in_comment()
  321   0.522683   0.015237  vimtex#syntax#in()
  321   0.507446             vimtex#syntax#stack()
  253   0.362474   0.057593  vimtex#delim#get_matching()
  255   0.295745   0.127831  <SNR>89_parser_delim()
  251   0.240609   0.236178  <SNR>89_get_matching_delim()
  282   0.202946   0.202941  UltiSnips#CursorMoved()
  510   0.096208   0.078937  <SNR>89_parser_delim_get_regexp()
  844   0.077791   0.020551  vimtex#pos#set_cursor()
  602   0.074224   0.019645  3()
  255   0.071706             <SNR>89_parser_delim_get_corr()
  850   0.057534   0.057439  <SNR>101_parse_args()
  624   0.057217             4()
    1   0.035271   0.035206  UltiSnips#ExpandSnippetOrJump()
    2   0.018909   0.000130  vimtex#cmd#get_at()
    2   0.018430   0.000233  vimtex#cmd#get_current()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  569  14.940843  14.936085  UltiSnips#TrackChange()
  320   2.221246   1.888299  <SNR>89_get_delim()
  321              0.507446  vimtex#syntax#stack()
  251   0.240609   0.236178  <SNR>89_get_matching_delim()
  282   0.202946   0.202941  UltiSnips#CursorMoved()
  255   0.295745   0.127831  <SNR>89_parser_delim()
  510   0.096208   0.078937  <SNR>89_parser_delim_get_regexp()
  255              0.071706  <SNR>89_parser_delim_get_corr()
  314   3.192179   0.067542  188()
  253   0.362474   0.057593  vimtex#delim#get_matching()
  850   0.057534   0.057439  <SNR>101_parse_args()
  624              0.057217  4()
    1   0.035271   0.035206  UltiSnips#ExpandSnippetOrJump()
  844   0.077791   0.020551  vimtex#pos#set_cursor()
  602   0.074224   0.019645  3()
  321   0.522683   0.015237  vimtex#syntax#in()
  314   2.223946   0.014804  vimtex#delim#get_current()
  314              0.013467  187()
  314   0.526778   0.008709  vimtex#syntax#in_comment()
  583              0.004778  vimtex#pos#get_cursor()

